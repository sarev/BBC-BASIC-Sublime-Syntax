%YAML 1.2
---
# BBC BASIC Syntax Highlighting Rules for Sublime Text
# Copyright (c) 2024, 7th software Ltd.
# All rights reserved.
#
# These rules were derived from the rouge lexer for BBC BASIC by bavison.
# https://github.com/rouge-ruby/rouge/blob/master/lib/rouge/lexers/bbcbasic.rb
#
name: BBC BASIC Modern Syntax
file_extensions:
  - "bbcbasic"
  - "fd1"
  - "bas"
scope: source.bbcbasic
contexts:
  main:
    # Rule 1: Star command at the start of a line
    - match: '^\s*\*(.*)$'
      scope: punctuation.text keyword.cli-command.text
      captures:
        1: punctuation.text  # The '*' character
        2: keyword.cli-command  # The command after '*'

    # Rule 2: Star command after a colon (start of a statement)
    - match: '^\s*:(\s*\*)(.*)$'
      scope: punctuation.text keyword.cli-command.text
      captures:
        1: punctuation.text  # The ':' character
        2: punctuation.text  # The '*' character
        3: keyword.cli-command  # The command after '*'

    # Rule 3: Star command following (ELSE|OTHERWISE|REPEAT|THEN), ignoring spaces
    - match: '^\s*(ELSE|OTHERWISE|REPEAT|THEN)\s*(\*)(.*)$'
      scope: keyword.text punctuation.text keyword.cli-command.text
      captures:
        1: keyword  # The control statement (ELSE, OTHERWISE, etc.)
        2: punctuation.text  # The '*' character
        3: keyword.cli-command  # The command after '*'

    - match: '[ \n]+'
      scope: text
    - match: '[:(),;]+'
      scope: punctuation
    - match: '((<<|<=|<>|<|>=|>>>|>>|>|[-!$()*+/=?^.|])|(\b(AND|DIV|EOR|MOD|NOT|OR)\b))'
      scope: operator
    - match: '\['
      scope: keyword.assembly-opcode
      push: assembly-opcode
    - match: '^\s*REM\s*>.*'
      scope: comment.line.special
      when: first_line
    - match: 'REM.*'
      scope: comment.line
    - match: 'PROC[\w`@]+'
      scope: name.procedure
    - match: 'FN[\w`@]+'
      scope: name.function
    - match: '\b(?:(?:CHR|GET|INKEY|LEFT|MID|REPORT|RIGHT|STR|STRING)\$|(?:ABS|ACS|ADVAL|ASC|ASN|ATN|BEATS|BEAT|COS|COUNT|DEG|DIM|ERL|ERR|EVAL|EXP|FN|GET|INKEY|INSTR|INT|LEN|LN|LOG|OPENIN|OPENOUT|OPENUP|POINT|POS|RAD|RND|SGN|SIN|SQR|SUM|SUMLEN|TAN|TEMPO|TOP|USR|VAL|VPOS)\b)'
      scope: name.builtin.function
    - match: '\b(?:(?:BGET#|EOF#|GET\$#)|(?:OPENIN|OPENOUT|OPENUP)\b)'
      scope: name.builtin.file-io
    - match: '\b(?:(?:EXT#|PTR#|TIME\$)|(?:HIMEM|LOMEM|PAGE|TIME)\b)'
      scope: name.builtin.pseudo-variable
    - match: '(FALSE|PI|TRUE)\b'
      scope: name.constant
    - match: '"[^"]*"'
      scope: string.quoted.double
    - match: '@%'
      scope: name.variable
    - match: '[\d.]+'
      scope: constant.numeric
    - match: '%[01]+'
      scope: constant.numeric.binary
    - match: '&[\h]+'
      scope: constant.numeric.hex
    - match: '(BPUT#|CLOSE#|INPUT#|PRINT#)'
      scope: keyword.file-io
    - match: '((ENDWHILE|FOR|NEXT|REPEAT|STEP|TO|UNTIL|WHILE)\b)'
      scope: keyword.iteration
    - match: '((CALL|GOSUB|GOTO|RETURN|RUN)\b)'
      scope: keyword.branch
    - match: '((CASE|ELSE|ENDCASE|ENDIF|IF|OF|OTHERWISE|THEN|WHEN)\b)'
      scope: keyword.conditional
    - match: '((CIRCLE|CLG|DRAW|ELLIPSE|FILL|GCOL|LINE|MODE|MOVE|ORIGIN|PLOT|RECTANGLE|TINT|VDU)\b)'
      scope: keyword.graphics
    - match: '((BEATS|ENVELOPE|SOUND|STEREO|VOICES|VOICE)\b)'
      scope: keyword.sound
    - match: '((CLS|COLOR|COLOUR|INPUT|PRINTTAB|PRINT|WIDTH)\b)'
      scope: keyword.text-io
    - match: '((APPEND|AUTO|CHAIN|CRUNCH|DELETE|EDITO|EDIT|HELP|INSTALL|LIST|LISTO|LOAD|LVAR|NEW|OLD|RENUMBER|SAVE|TEXTLOAD|TEXTSAVEO|TEXTSAVE|TWINO|TWIN)\b)'
      scope: keyword.command
    - match: '((BEATS|BY|CLEAR|CLOSE|DATA|DIM|DEF|ENDPROC|END|ERROR|EXT|FN|INSTALL|LET|LIBRARY|LOCAL|MOUSE|OFF|ON|OSCLI|OVERLAY|PROC|QUIT|READ|REPORT|RESTORE|STOP|SWAP|SYS|TRACE|WAIT)\b)'
      scope: keyword
    - match: '[A-Za-z_`][\w`]*[$%]?'
      scope: name.variable
    - match: '[,;\''~] SPC TAB'
      scope: punctuation
      push: expression

  expression:
    - match: '((<<|<=|<>|<|>=|>>>|>>|>|[-!$()*+/=?^.|])|(\b(AND|DIV|EOR|MOD|NOT|OR)\b))'
      scope: operator
    - match: '\b(?:(?:CHR|GET|INKEY|LEFT|MID|REPORT|RIGHT|STR|STRING)\$|(?:ABS|ACS|ADVAL|ASC|ASN|ATN|BEATS|BEAT|COS|COUNT|DEG|DIM|ERL|ERR|EVAL|EXP|FN|GET|INKEY|INSTR|INT|LEN|LN|LOG|OPENIN|OPENOUT|OPENUP|POINT|POS|RAD|RND|SGN|SIN|SQR|SUM|SUMLEN|TAN|TEMPO|TOP|USR|VAL|VPOS)\b)'
      scope: name.builtin.function
    - match: '\b(?:(?:BGET#|EOF#|GET\$#)|(?:OPENIN|OPENOUT|OPENUP)\b)'
      scope: name.builtin.file-io
    - match: '\b(?:(?:EXT#|PTR#|TIME\$)|(?:HIMEM|LOMEM|PAGE|TIME)\b)'
      scope: name.builtin.pseudo-variable
    - match: '(FALSE|PI|TRUE)\b'
      scope: name.constant
    - match: '"[^"]*"'
      scope: string.quoted.double
    - match: '[A-Za-z_`][\w`]*[$%]?'
      scope: name.variable
    - match: '@%'
      scope: name.variable
    - match: '[\d.]+'
      scope: constant.numeric
    - match: '%[01]+'
      scope: constant.numeric.binary
    - match: '&[\h]+'
      scope: constant.numeric.hex

  assembly-opcode:
    - match: ' +'
      scope: text
    - match: '\]'
      scope: keyword.assembly-opcode
      pop: true
    - match: '[:\n]'
      scope: punctuation
    - match: '\.[A-Za-z_`][\w`]*%? *'
      scope: name.label
    - match: '(?:REM|;)[^:\n]*'
      scope: comment
    - match: '[^ :\n]+'
      scope: keyword.assembly-operands
      push: assembly-operands

  assembly-operands:
    - match: ' +'
      scope: text
    - match: '[:\n]'
      scope: punctuation
      pop: true
    - match: '(?:REM|;|\\)[^:\n]*'
      scope: comment.assembly
      pop: true
    - match: '\b(?:(?:CHR|GET|INKEY|LEFT|MID|REPORT|RIGHT|STR|STRING)\$|(?:ABS|ACS|ADVAL|ASC|ASN|ATN|BEATS|BEAT|COS|COUNT|DEG|DIM|ERL|ERR|EVAL|EXP|FN|GET|INKEY|INSTR|INT|LEN|LN|LOG|OPENIN|OPENOUT|OPENUP|POINT|POS|RAD|RND|SGN|SIN|SQR|SUM|SUMLEN|TAN|TEMPO|TOP|USR|VAL|VPOS)\b)'
      scope: name.builtin.function
    - match: '\b(?:(?:BGET#|EOF#|GET\$#)|(?:OPENIN|OPENOUT|OPENUP)\b)'
      scope: name.builtin.file-io
    - match: '\b(?:(?:EXT#|PTR#|TIME\$)|(?:HIMEM|LOMEM|PAGE|TIME)\b)'
      scope: name.builtin.pseudo-variable
    - match: '((<<|<=|<>|<|>=|>>>|>>|>|[-!$()*+/=?^.|])|(\b(AND|DIV|EOR|MOD|NOT|OR)\b))'
      scope: operator
    - match: '(FALSE|PI|TRUE)\b'
      scope: name.constant
    - match: '"[^"]*"'
      scope: string.quoted.double
    - match: '[A-Za-z_`][\w`]*[$%]?'
      scope: name.variable
    - match: '@%'
      scope: name.variable
    - match: '[\d.]+'
      scope: constant.numeric
    - match: '%[01]+'
      scope: constant.numeric.binary
    - match: '&[\h]+'
      scope: constant.numeric.hex
    - match: '[!#,@\[\]^{}]'
      scope: punctuation
